# ‚öôÔ∏è Terraform Provisioners ‚Äì Deep Dive Notes

## üìò What Are Provisioners?
Provisioners in Terraform allow you to execute scripts or commands on local or remote machines during resource creation or destruction. They are useful for bootstrapping, configuration, or post-deployment tasks.

---

## üîπ Types of Provisioners

### 1. üìÅ `file` Provisioner
Used to copy files or directories from the local machine to a remote instance.

**Example**:
```hcl
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  provisioner "file" {
    source      = "local/path/to/localfile.txt"
    destination = "/path/on/remote/instance/file.txt"

    connection {
      type        = "ssh"
      user        = "ec2-user"
      private_key = file("~/.ssh/id_rsa")
    }
  }
}



Use Case: Deploying config files, scripts, or assets to EC2 instances.

2. üñ•Ô∏è remote-exec Provisioner
Runs commands or scripts on a remote machine via SSH or WinRM.

Example:

hcl
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  provisioner "remote-exec" {
    inline = [
      "sudo yum update -y",
      "sudo yum install -y httpd",
      "sudo systemctl start httpd"
    ]

    connection {
      type        = "ssh"
      user        = "ec2-user"
      private_key = file("~/.ssh/id_rsa")
      host        = aws_instance.example.public_ip
    }
  }
}
Use Case: Installing packages, starting services, or configuring remote systems.

3. üíª local-exec Provisioner
Executes commands on the machine where Terraform is running.

Example:

hcl
resource "null_resource" "example" {
  triggers = {
    always_run = "${timestamp()}"
  }

  provisioner "local-exec" {
    command = "echo 'This is a local command'"
  }
}
Use Case: Logging, triggering local scripts, or interacting with local tools.

‚ö†Ô∏è Best Practices
Avoid using provisioners for complex configuration‚Äîuse tools like Ansible or Packer instead.

Use null_resource with local-exec for non-infrastructure tasks.

Ensure SSH keys and permissions are correctly configured.

Provisioners are not idempotent‚Äîthey may run every time unless carefully managed.
